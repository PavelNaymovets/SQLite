1. Покажите информацию по потокам. В отчет выведите номер потока, название курса и дату
начала занятий.

Пояснение:

Применяю INNER JOIN (JOIN), так как меня не интересуют потоки без даты начала и названия курса

Исходные данные:

sqlite> SELECT * FROM streams;
+----+-----------+--------+------------+--------------------+-------------+
| id | course_id | number | started_at | number_of_students | finished_at |
+----+-----------+--------+------------+--------------------+-------------+
| 1  | 3         | 165    | 2020-08-18 | 34                 |             |
| 2  | 2         | 178    | 2020-10-02 | 37                 |             |
| 3  | 1         | 203    | 2020-11-12 | 35                 |             |
| 4  | 1         | 210    | 2020-12-03 | 41                 |             |
+----+-----------+--------+------------+--------------------+-------------+
sqlite> SELECT * FROM courses;
+----+-----------------------+
| id |         name          |
+----+-----------------------+
| 1  | База данных           |
| 2  | Основы Python         |
| 3  | Linux.Рабочая станция |
+----+-----------------------+

-- Решение:

sqlite> SELECT
   ...> streams.number AS 'stream_number',
   ...> courses.name AS 'course_name',
   ...> streams.started_at
   ...> FROM streams
   ...> INNER JOIN courses
   ...> ON streams.course_id = courses.id;
+---------------+-----------------------+------------+
| stream_number |      course_name      | started_at |
+---------------+-----------------------+------------+
| 165           | Linux.Рабочая станция | 2020-08-18 |
| 178           | Основы Python         | 2020-10-02 |
| 203           | База данных           | 2020-11-12 |
| 210           | База данных           | 2020-12-03 |
+---------------+-----------------------+------------+

2.Найдите общее количество учеников для каждого курса. В отчёт выведите название курса и
количество учеников по всем потокам курса.

Пояснение:

Применяю INNER JOIN (JOIN), так как меня не интересуют курсы без учеников

Исходные данные:

sqlite> SELECT * FROM courses;
+----+-----------------------+
| id |         name          |
+----+-----------------------+
| 1  | База данных           |
| 2  | Основы Python         |
| 3  | Linux.Рабочая станция |
+----+-----------------------+
sqlite> SELECT * FROM streams;
+----+-----------+--------+------------+--------------------+-------------+
| id | course_id | number | started_at | number_of_students | finished_at |
+----+-----------+--------+------------+--------------------+-------------+
| 1  | 3         | 165    | 2020-08-18 | 34                 |             |
| 2  | 2         | 178    | 2020-10-02 | 37                 |             |
| 3  | 1         | 203    | 2020-11-12 | 35                 |             |
| 4  | 1         | 210    | 2020-12-03 | 41                 |             |
+----+-----------+--------+------------+--------------------+-------------+

Решение:

sqlite> SELECT
   ...> courses.name AS 'course_name',
   ...> SUM(streams.number_of_students)
   ...> FROM courses
   ...> INNER JOIN streams
   ...> ON courses.id = streams.course_id
   ...> GROUP BY course_name;
+-----------------------+---------------------------------+
|      course_name      | SUM(streams.number_of_students) |
+-----------------------+---------------------------------+
| Linux.Рабочая станция | 34                              |
| База данных           | 76                              |
| Основы Python         | 37                              |
+-----------------------+---------------------------------+

3.Для всех учителей найдите среднюю оценку по всем проведённым потокам. В отчёт выведите
идентификатор, фамилию и имя учителя, среднюю оценку по всем проведенным потокам.
Важно чтобы учителя, у которых не было потоков, также попали в выборку.

Исходные данные:

sqlite> SELECT
   ...> teachers.id,
   ...> teachers.surname,
   ...> teachers.name,
   ...> streams.number AS 'stream_number',
   ...> grades.grade
   ...> FROM teachers
   ...> LEFT JOIN grades
   ...> ON teachers.id = grades.teacher_id
   ...> LEFT JOIN streams
   ...> ON grades.stream_id = streams.id;
+----+----------+---------+---------------+-------+
| id | surname  |  name   | stream_number | grade |
+----+----------+---------+---------------+-------+
| 1  | Савельев | Николай | 203           | 4.8   |
| 1  | Савельев | Николай | 210           | 4.9   |
| 2  | Петрова  | Наталья | 178           | 4.9   |
| 3  | Малышева | Елена   | 165           | 4.7   |
+----+----------+---------+---------------+-------+

Пояснение:

Применяю LEFT OUTER JOIN (LEFT JOIN), так как в выборку должны попасть учителя у которых не было потоков. На текущий момент в
таблице оценок, учителей и потоков нет преподавателей без потоков. Добавляю преподавателя без потоков и повторю запрос

sqlite> INSERT INTO teachers (name, surname, email) VALUES ('Петр', 'Иванов','ivanov.p@mail.ru');
sqlite> SELECT
   ...> teachers.id,
   ...> teachers.surname,
   ...> teachers.name,
   ...> streams.number AS 'stream_number',
   ...> grades.grade
   ...> FROM teachers
   ...> LEFT JOIN grades
   ...> ON teachers.id = grades.teacher_id
   ...> LEFT JOIN streams
   ...> ON grades.stream_id = streams.id;
+----+----------+---------+---------------+-------+
| id | surname  |  name   | stream_number | grade |
+----+----------+---------+---------------+-------+
| 1  | Савельев | Николай | 203           | 4.8   |
| 1  | Савельев | Николай | 210           | 4.9   |
| 2  | Петрова  | Наталья | 178           | 4.9   |
| 3  | Малышева | Елена   | 165           | 4.7   |
| 4  | Иванов   | Петр    |               |       |
+----+----------+---------+---------------+-------+

Теперь такой преподаватель появился. Напишу запрос который выведет:
идентификатор, фамилию и имя учителя, среднюю оценку по всем проведенным потокам согласно задания.


Решение:

sqlite> SELECT
   ...> teachers.id,
   ...> teachers.surname,
   ...> teachers.name,
   ...> AVG(grades.grade) AS 'average_grade'
   ...> FROM teachers
   ...> LEFT JOIN grades
   ...> ON teachers.id = grades.teacher_id
   ...> GROUP BY teachers.id;
+----+----------+---------+---------------+
| id | surname  |  name   | average_grade |
+----+----------+---------+---------------+
| 1  | Савельев | Николай | 4.85          |
| 2  | Петрова  | Наталья | 4.9           |
| 3  | Малышева | Елена   | 4.7           |
| 4  | Иванов   | Петр    |               |
+----+----------+---------+---------------+

4.Дополнительное задание. Для каждого преподавателя выведите имя, фамилию,
минимальное значение успеваемости по всем потокам преподавателя, название курса,
который соответствует потоку с минимальным значением успеваемости, максимальное
значение успеваемости по всем потокам преподавателя, название курса, соответствующий
потоку с максимальным значением успеваемости. В дополнительном задании допускается
применение вложенных запросов.

Пояснение:

Применяю INNER JOIN, так как меня интересуют только те преподаватели у которых есть курсы, потоки и оценки. Также в запросе использую вложенные запросы, чтобы
получить названия курсов.

Решение:

sqlite> SELECT
   ...> teachers.surname,
   ...> teachers.name,
   ...> MIN(grades.grade) AS 'mimimum_grade',
   ...> (SELECT name FROM courses WHERE courses.id =
   ...> (SELECT course_id FROM streams WHERE streams.id = grades.stream_id
   ...> GROUP BY course_id HAVING streams.id =
   ...> (SELECT stream_id FROM
   ...> (SELECT stream_id, MIN(grades.grade) FROM grades)))) AS 'course_min_name',
   ...> MAX(grades.grade) AS 'maximum_grade',
   ...> (SELECT name FROM courses WHERE courses.id =
   ...> (SELECT course_id FROM streams WHERE streams.id = grades.stream_id
   ...> GROUP BY course_id HAVING streams.id >
   ...> (SELECT stream_id FROM
   ...> (SELECT stream_id, MIN(grades.grade) FROM grades)))) AS  'course_max_name'
   ...> FROM grades
   ...> INNER JOIN teachers
   ...> ON grades.teacher_id = teachers.id
   ...> GROUP BY grades.teacher_id;
+----------+---------+---------------+-----------------------+---------------+-----------------+
| surname  |  name   | mimimum_grade |    course_min_name    | maximum_grade | course_max_name |
+----------+---------+---------------+-----------------------+---------------+-----------------+
| Савельев | Николай | 4.8           |                       | 4.9           | База данных     |
| Петрова  | Наталья | 4.9           |                       | 4.9           | Основы Python   |
| Малышева | Елена   | 4.7           | Linux.Рабочая станция | 4.7           |                 |
+----------+---------+---------------+-----------------------+---------------+-----------------+


